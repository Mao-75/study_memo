リテラル
→ソースコードに直接埋め込むことができる値のこと
  数値(整数)、文字列、配列、ハッシュ、正規表現など



スネークケース
→単語をアンダースコア( _ )で区切る記法



キャメルケース
→スペースを詰めて次の語を大文字で始める記法



多重代入
→2つ以上の値を同時に代入すること
[例]  a, b = 1, 2
      a #=> 1
      b #=> 2
      
      # 右辺の数が少ない時はnilが入る 
      c, d = 10
      c #=> 10
      d #=> nil
      
      # 右辺の数が多い場合ははみ出した値が切り捨てられる
      e, f = 100, 200, 300
      e #=> 100
      f #=> 200



シングルクオート、ダブルクオート
→文字列の中に改行文字(\n)を埋め込みたい場合はダブルクオートで囲む
  シングルクオートで囲むとただの文字列になる
[例] ダブルクオートの場合
      puts "こんにちは\nさようなら"
      #=> こんにちは
      #=> さようなら
      
[例] シングルクオートの場合
      puts 'こんにちは\nさようなら'
      #=> こんにちは\nさようなら



エスケープ処理
→特別な意味を持つ文字の機能を打ち消したりただの文字として扱えるようにすること
  ダブルクオートで改行文字や式展開を打ち消したい場合は手前にバックスラッシュをつける
[例] 改行文字
      puts "こんにちは\\nさようなら"
      #=> こんにちは\nさようなら
      
[例] 式展開
      name = 'Alice'
      puts "Hello, \#{name}!"
      #=> Hello, #{name}!



基数指示子
→２進数は 0b 、 ８進数は  0 または 0o 、１６進数は 0x という基数指示子を先頭につけるとそれぞれ１０進法以外の記数法を書くことができる
[例] ２進数
0b11111111 #=> 255

[例] ８進数
0377       #=> 255

[例] １６進数
0xff       #=> 255

[例] １０進数(0dをつけなくても同じなので、普通はつけない)
0d255      #=> 255



指数表現
→指数表現を使って浮動小数点数を表すことができる
[例] 2e-3は[2 x 10^-3]を表す
2e-3 #=> 0.002



ガーベージコレクション(GC)
→使用されなくなったオブジェクトを回収し、自動的にメモリを解放する。
この仕組みをガーベージコレクション(garbage collection, 略してGC)と言う。



エイリアスメソッド
→全く同じ実装で名前だけ異なるメソッドのこと。
[例] lengthもsizeも、どちらも文字数を返す
'hello'.length #=> 5
'hello'.size   #=> 5



擬似変数
→nilとtrueとfalseは擬似変数と呼ばれる特殊な変数。
[例] 他の擬似変数
self         : オブジェクト自身
__FILE__     : 現在のソースファイル名
__LINE__     : 現在のソースファイル中の行番号
__ENCODiNG__ : 現在のソースファイルのスクリプトエンコーディング

→擬似変数は変数と同じように値を読み出すことができるが代入しようとするとエラーが発生する。
[例]
true = 1
#=> Can't assign to true (SyntaxError)
#=> true = 1
#=> ^~~~



グローバル関数
→プログラムのどこからでも呼び出せる関数のこと。
